<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository {

    public function get($id) {
        if (empty($id) || $id == "{id}") {
            return $this->getAllUsers();
        } else {
            return $this->getUserInfo($id);
        }
    }

    public function getAllUsers() {
        $em = $this->getEntityManager();
        $query = $em->getRepository('AppBundle:User')
                ->createQueryBuilder('u')
                ->select('u.id as user_id, u.name as user_name, g.name as user_group')
                ->leftJoin('u.group', 'g')
                ->getQuery();
        $users = $query->getArrayResult();
        return ['data' => $users];
    }

    public function getUserInfo($id) {
        $em = $this->getEntityManager();
        $query = $em->getRepository('AppBundle:User')
                ->createQueryBuilder('u')
                ->select('u.id as user_id, u.name as user_name, g.name as user_group')
                ->leftJoin('u.group', 'g')
                ->where('u.id = :id')
                ->setParameter('id', $id)
                ->getQuery();
        $user = $query->getOneOrNullResult();
        if (empty($user)) {
            return ['message' => 'user not found'];
        }
        return ['data' => $user];
    }

    public function post($id, $userName, $userGroupId) {
        if (empty($id) || $id == "{id}") {
            return $this->newUser($userName, $userGroupId);
        } else {
            return $this->updateUser($id, $userName, $userGroupId);
        }
    }

    public function newUser($userName, $userGroupId) {
        $em = $this->getEntityManager();
        if (!empty($userName)) {
            if (!empty($userGroupId)) {
                $group = $em->getRepository('AppBundle:Group')->find($userGroupId);
            } else {
                $group = null;
            }
            $user = new User();
            $user->setName($userName);
            $user->setGroup($group);
            $em->persist($user);
            $em->flush();
            return [
                'message' => 'new user added succussfully',
                'data' => [
                    'user_id' => $user->getId(),
                    'user_name' => $user->getName(),
                    'user_group' => ($user->getGroup()) ? $user->getGroup()->getName() : '',
                ]
            ];
        } else {
            return ['message' => 'missing parameters'];
        }
    }

    public function updateUser($id, $userName, $userGroupId) {
        $em = $this->getEntityManager();
        if (!empty($userName)) {
            $user = $em->getRepository('AppBundle:User')->find($id);
            if ($user) {
                if (!empty($userGroupId)) {
                    $group = $em->getRepository('AppBundle:Group')->find($userGroupId);
                } else {
                    $group = $user->getGroup();
                }
                $user->setName($userName);
                $user->setGroup($group);
                $em->flush();
                return [
                    'message' => 'user updated succussfully',
                    'data' => [
                        'user_id' => $user->getId(),
                        'user_name' => $user->getName(),
                        'user_group' => ($user->getGroup()) ? $user->getGroup()->getName() : '',
                    ]
                ];
            } else {
                return ['message' => 'user not found'];
            }
        } else {
            return ['message' => 'missing parameters'];
        }
    }

    public function delete($id) {
        $em = $this->getEntityManager();
        if (!empty($id)) {
            $user = $em->getRepository('AppBundle:User')->find($id);
            if ($user) {
                $em->remove($user);
                $em->flush();
                return ['message' => 'user deleted successfully'];
            } else {
                return ['message' => 'user not found'];
            }
        }
        return ['message' => 'missing user id'];
    }

}
