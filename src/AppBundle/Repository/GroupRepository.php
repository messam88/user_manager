<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Group;

/**
 * GroupsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupRepository extends \Doctrine\ORM\EntityRepository {

    public function get($id) {
        if (empty($id) || $id == '{id}') {
            return $this->getAllGroups();
        } else {
            return $this->getGroupInfo($id);
        }
    }

    public function getAllGroups() {
        $em = $this->getEntityManager();
        $query = $em->getRepository('AppBundle:Group')
                ->createQueryBuilder('g')
                ->select('g.id as group_id, g.name as group_name')
                ->getQuery();
        $groups = $query->getArrayResult();
        return ['data' => $groups];
    }

    public function getGroupInfo($id) {
        $groupArr = [];
        $em = $this->getEntityManager();
        $group = $em->getRepository('AppBundle:Group')->find($id);
        if ($group) {
            $groupArr['group_id'] = $group->getId();
            $groupArr['group_name'] = $group->getName();
        }
        return ['data' => $groupArr];
    }

    public function post($id, $groupName) {
        if (!empty($groupName)) {
            if (empty($id) || $id == '{id}') { // new 
                return $this->newGroup($groupName);
            } else { // update
                return $this->updateGroup($id, $groupName);
            }
        } else {
            return['message' => 'missing group name'];
        }
    }

    public function newGroup($name) {
        $groupArr = [];
        $groups = new Group();
        $groups->setName($name);
        $em = $this->getEntityManager();
        $em->persist($groups);
        $em->flush();
        $groupArr['group_id'] = $groups->getId();
        $groupArr['group_name'] = $groups->getName();
        return [
            'message' => 'new group added successfully',
            'data' => $groupArr
        ];
    }

    public function updateGroup($id, $name) {
        $em = $this->getEntityManager();
        $group = $em->getRepository('AppBundle:Group')->find($id);
        if ($group) {
            $group->setName($name);
            $em->flush();
            return['message' => 'group updated successfully'];
        } else {
            return['message' => 'missing group'];
        }
    }

    public function delete($id) {
        $em = $this->getEntityManager();
        if (!empty($id)) {
            $group = $em->getRepository('AppBundle:Group')->find($id);
            if ($group) {
                if (count($group->getUsers()) == 0) {
                    $em->remove($group);
                    $em->flush();
                    return ['message' => 'group deleted successfully'];
                } else {
                    return ['message' => 'sorry group has registed users'];
                }
            } else {
                return ['message' => 'group not found'];
            }
        }
        return ['message' => 'missing group id'];
    }

    public function getUsers($groupId) {
        if (!empty($groupId) && $groupId != '{id}') {
            $em = $this->getEntityManager();
            $query = $em->getRepository('AppBundle:User')
                    ->createQueryBuilder('u')
                    ->select('u.id as user_id, u.name as user_name')
                    ->join('u.group', 'g')
                    ->where('g.id = :id')
                    ->setParameter('id', $groupId)
                    ->getQuery();
            $users = $query->getArrayResult();
            return ['data' => $users];
        } else {
            return ['message' => 'missing group id'];
        }
    }

    public function userGroup($groupId, $userId, $method) {
        if (!empty($groupId) && !empty($userId) && $groupId != '{id}' && $userId != '{uid}') {
            $em = $this->getEntityManager();
            $group = $em->getRepository('AppBundle:Group')->find($groupId);
            if (!empty($group)) {
                $user = $em->getRepository('AppBundle:User')->find($userId);
                if (!empty($user)) {
                    if ($method == 'POST') {
                        return $this->updateUserGroup($group, $user);
                    } else if ($method == 'DELETE') {
                        return $this->deleteUserGroup($user);
                    }
                } else {
                    return ['message' => 'user not found'];
                }
            } else {
                return ['message' => 'group not found'];
            }
        } else {
            return ['message' => 'missing parameters'];
        }
    }

    public function deleteUserGroup($user) {
        $em = $this->getEntityManager();
        $user->setGroup(null);
        // $group->removeUser($user);
        $em->flush();
        return ['message' => 'user group deleted succussfully'];
    }

    public function updateUserGroup($group, $user) {
        $em = $this->getEntityManager();
        $user->setGroup($group);
        //$group->addUser($user);
        $em->flush();
        return ['message' => 'user group updated succussfully'];
    }

}
